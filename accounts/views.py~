from django.shortcuts import render
from userena.decorators import secure_required
from guardian.decorators import permission_required_or_403
from userena.views import get_profile_model
from userena.forms import (SignupForm, SignupFormOnlyEmail, AuthenticationForm, ChangeEmailForm, EditProfileForm)
from django.shortcuts import redirect, get_object_or_404
from userena.utils import (signin_redirect, get_profile_model, get_user_model, get_user_profile)
from userena.views import ExtraContextTemplateView

from django.forms.formsets import formset_factory
from django.forms.models import modelformset_factory
from accounts.forms import AwardsForm, ProfExpForm, ProjExpForm
from django.core.exceptions import ValidationError
from django.http import HttpResponse
from accounts.models import Profile_Experience, Project_Experience, Awards, MyProfile
from django.forms.extras.widgets import SelectDateWidget
from django.db import IntegrityError

@secure_required
@permission_required_or_403('change_profile', (get_profile_model(), 'user__username', 'username'))
def profile_edit_extended(request, username, edit_profile_form=EditProfileForm, template_name='userena/profile_form_extended.html', success_url=None,extra_context=None, **kwargs):
	"""
	Edit profile.

	Edits a profile selected by the supplied username. First checks
	permissions if the user is allowed to edit this profile, if denied will
	show a 404. When the profile is successfully edited will redirect to
	``success_url``.

	:param username:
		Username of the user which profile should be edited.

	:param edit_profile_form:

		Form that is used to edit the profile. The :func:`EditProfileForm.save`
		method of this form will be called when the form
		:func:`EditProfileForm.is_valid`.  Defaults to :class:`EditProfileForm`
		from userena.

	:param template_name:
		String of the template that is used to render this view. Defaults to
		``userena/edit_profile_form.html``.

	:param success_url:
		Named URL which will be passed on to a django ``reverse`` function after
		the form is successfully saved. Defaults to the ``userena_detail`` url.

	:param extra_context:
		Dictionary containing variables that are passed on to the
		``template_name`` template.  ``form`` key will always be the form used
		to edit the profile, and the ``profile`` key is always the edited
		profile.

	**Context**

	``form``
		Form that is used to alter the profile.

	``profile``
		Instance of the ``Profile`` that is edited.

	"""
	user = get_object_or_404(get_user_model(), username__iexact=username)
	profile = get_user_profile(user=user)

	user_initial = {'first_name': user.first_name, 'last_name': user.last_name}
	form = edit_profile_form(instance=profile, initial=user_initial)

	#FormSetProfExp = formset_factory(ProfExpForm)
	#FormSetProjExp = formset_factory(ProjExpForm)
	#FormSetAwards = formset_factory(AwardsForm, can_delete = True)
	FormSetProfExp = modelformset_factory(Profile_Experience, exclude=('profile',), can_delete = True, widgets = {'jobstart':SelectDateWidget(),'jobend':SelectDateWidget() })
	FormSetProjExp = modelformset_factory(Project_Experience, exclude=('profile',), can_delete = True,widgets = {'projectstart':SelectDateWidget(),'projectend':SelectDateWidget() })
	FormSetAwards = modelformset_factory(Awards, exclude=('profile',), can_delete = True)
	
	if request.method == 'POST':
		formSetProfExp = FormSetProfExp(request.POST)
		formSetProjExp = FormSetProjExp(request.POST)
		formSetAwards = FormSetAwards(request.POST)
		'''
		for form in formSetProfExp:
			if form.is_valid():
				profExp = form.save(commit = False)
				profExp.profile = profile
				try:
					profExp.save()
				except IntegrityError:
					pass
		
		for form in formSetProjExp:
			if form.is_valid():
				projExp = form.save(commit = False)
				projExp.profile = profile
				try:
					projExp.save()
				except IntegrityError:
					pass
		'''
		if formSetProfExp.is_valid():
			formSetProfExp.save(commit = False)
			for anobject in formSetProfExp.new_objects:
				anobject.profile = profile
			formSetProfExp.save(commit = True)
		
		if formSetProjExp.is_valid():
			formSetProjExp.save(commit = False)
			for anobject in formSetProjExp.new_objects:
				anobject.profile = profile
			formSetProjExp.save(commit = True)
		
		if formSetAwards.is_valid():
			formSetAwards.save(commit = False)
			for anobject in formSetAwards.new_objects:
				anobject.profile = profile
			formSetAwards.save(commit = True)
		
		form = edit_profile_form(request.POST, request.FILES, instance=profile, initial=user_initial)
		if form.is_valid():
			profile = form.save()

			if userena_settings.USERENA_USE_MESSAGES:
				messages.success(request, _('Your profile has been updated.'),fail_silently=True)

			if success_url:
				# Send a signal that the profile has changed
				userena_signals.profile_change.send(sender=None, user=user)
				redirect_to = success_url
			else: redirect_to = reverse('userena_profile_detail', kwargs={'username': username})
			return redirect(redirect_to)
	

	if not extra_context: extra_context = dict()
	extra_context['form'] = form
	extra_context['profile'] = profile

	# here additional arguments, such as "extra", may be passed
	formSetProfExp = FormSetProfExp(queryset = Profile_Experience.objects.filter(profile = profile))
	formSetProjExp = FormSetProjExp(queryset = Project_Experience.objects.filter(profile = profile))
	formSetAwards = FormSetAwards(queryset = Awards.objects.filter(profile = profile))

	extra_context['formSetProfExp'] = formSetProfExp
	extra_context['formSetProjExp'] = formSetProjExp
	extra_context['formSetAwards'] = formSetAwards

	return ExtraContextTemplateView.as_view(template_name=template_name, extra_context=extra_context)(request)

@secure_required
@permission_required_or_403('change_profile', (get_profile_model(), 'user__username', 'username'))
def profile_detail_extended(request, username, edit_profile_form=EditProfileForm, template_name='userena/profile_detail_extended.html', success_url=None,extra_context=None, **kwargs):
	user = get_object_or_404(get_user_model(), username__iexact=username)
	profile = get_user_profile(user=user)
	if not extra_context: extra_context = dict()
	extra_context['profExpData'] = Profile_Experience.objects.filter(profile = profile)
	extra_context['projExpData'] = Project_Experience.objects.filter(profile = profile)
	extra_context['awardsData'] = Awards.objects.filter(profile = profile)
	return ExtraContextTemplateView.as_view(template_name=template_name, extra_context=extra_context)(request)



